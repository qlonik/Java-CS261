package hashTable;//*************************************************************************//  OpenHashTable.java       				Implemented by:////  Represents an Open Address implementation of a hash table.//  			Choose Probing sequence: Linear  vs Quadratic////*************************************************************************public abstract class OpenHashTable<KT extends Comparable<? super KT>, T extends KeyedItem<KT>>        implements HashTableADT<KT, T> {  protected int size = 0;  protected T[] table = null;  //  Creates an empty hash table using the default capacity.  public OpenHashTable() {  }  //  Creates an empty hash table using the specified capacity.  //--------------------------------------------------------------------  public OpenHashTable(int capacity) {    table = (T[]) new KeyedItem[capacity];			// cast required    size = capacity;  }  //--------------    Table operations  //--------------------------------------------------------------------  //  Returns true if this hash table is empty and false otherwise.  //--------------------------------------------------------------------  public boolean tableIsEmpty() {    return size == 0;  }  // end tableIsEmpty  //--------------------------------------------------------------------  //  Returns the number of elements currently in this hash table.  //--------------------------------------------------------------------  public int tableLength() {    return size;  }  // end tableLength  //--------------------------------------------------------------------  //  Adds the element to the hash table.  //--------------------------------------------------------------------  public void tableInsert(KT key, T value) throws HashException {    throw new UnsupportedOperationException("Not supported yet.");  }  // method tableInsert  //--------------------------------------------------------------------  //  Flags the specified element as "invalid"  //--------------------------------------------------------------------  public boolean tableDelete(KT searchKey) {    throw new UnsupportedOperationException("Not supported yet.");    // not implemented  }  // method tableDelete  //--------------------------------------------------------------------  //	Returns the item matching the search key or  //	"null" if not found  //--------------------------------------------------------------------  public T tableRetrieve(KT searchKey) {    throw new UnsupportedOperationException("Not supported yet.");  }  // method tableRetrieve  //------------------------------------------------------------------  //  Returns true if this hash table contains the specified element.  //------------------------------------------------------------------  public boolean contains(KT key) {    T item = tableRetrieve(key);    return item != null;  }  public int hashIndex(KT key) {    return key.hashCode() % size;  }  // end hashIndex  //--------------------------------------------------------------------  //	Create a new hash table.  //--------------------------------------------------------------------  private void rehash() {    throw new UnsupportedOperationException("Not supported yet.");    //  "Not implemented"  }  //--------------------------------------------------------------------  //	Returns a string representation of this hash table.  //--------------------------------------------------------------------  public String toString() {    throw new UnsupportedOperationException("Not supported yet.");  }} // class OpenHashTable