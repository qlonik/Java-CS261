//****************************************************************************//  OrderedCollection.java      		Authors:////  Represents a linked implementation of a sorted list.//****************************************************************************//package collection;//import collection.exceptions.*;import java.util.*;public class OrderedCollection<T extends Comparable> implements CollectionADT<T>, Iterable<T>{										// instance variables   protected int 		numItems;   protected Node<T> 	head;   protected Node<T>	tail;   //	Constructor:    Creates an empty list.   public OrderedCollection()   {   		numItems = 0;   		head = tail = null;   }//	 adds the specified element to the list, keeping the elements in sorted order.    public boolean add (T element)    {    }	// method add  //   	Removes the first instance of the specified element from this  //   	list and returns a reference to it.  Throws an EmptyListException  //   	if the list is empty.  Throws a NoSuchElementException if the  //   	specified element is not found in the list.   public T remove (T targetElement) throws EmptyCollectionException,         									ElementNotFoundException   {      if (isEmpty())         throw new EmptyCollectionException ("List");      boolean found = false;      Node<T> previous = null;      Node<T> current = head;      while (current != null && !found)         if (targetElement.equals (current.getElement()))            found = true;         else         {            previous = current;            current = current.getNext();         }      if (!found)         throw new ElementNotFoundException ("List");	  T item = current.getElement();      if (size() == 1)         head = tail = null;      else if (current.equals (head))         head = current.getNext();      else if (current.equals (tail))      {         tail = previous;         tail.setNext(null);      }      else         previous.setNext(current.getNext());      numItems--;      return item;   }  //  method remove 	//  Removes and all elements from this list.   public void clear ()   {   }  // method clear   //  	Returns true if the specified element is found in this list and   //  	false otherwise. Throws an EmptyCollectionException if the list is empty.   public boolean contains (T targetElement)   									throws	EmptyCollectionException   {   }	// method contains   //  	Returns true if this list is empty and false otherwise.   public boolean isEmpty()   {   		return numItems == 0;   }  // method isEmpty   //  	Returns the number of elements in this list.   public int size()   {   		return numItems;   }  // method size   //  	Returns a string representation of this list.   public String toString()   {   }  // method toString   //  Returns an array containing all of the elements in this collection.   public Object[ ] toArray()   {   	  Object[] arr = new Object [numItems];      Node<T> current = head;   	  for (int count=0; count<numItems; count++)	{   	  	arr[count] = current.item;   	  	current = current.next;   	  }	  return arr;   }  // method toArray   //  	Returns an iterator for the elements currently in this list.   public Iterator<T> iterator()   {   	  return new LinkedIterator<T> (head, numItems);   }  // method Iterator}  // class OrderedCollection