package collection;import collection.exceptions.ElementNotFoundException;import collection.exceptions.EmptyCollectionException;import java.util.Iterator;//****************************************************************************//  OrderedCollection.java      		Authors:////  Represents a linked implementation of a sorted list.//****************************************************************************public class OrderedCollection<T extends Comparable>        implements CollectionADT<T>, Iterable<T> {  // instance variables  protected int numItems;  protected Node<T> head;  protected Node<T> tail;  //	Constructor:    Creates an empty list.  public OrderedCollection() {    numItems = 0;    head = tail = null;  }//	 adds the specified element to the list, keeping the elements in sorted order.  public boolean add(T element) {    boolean result = true;    if (numItems == 0) {      head = tail = new Node<>(element);    } else if (contains(element)) {      result = false;    } else {      Node<T> insertAfter = null, current = head;      while (current != tail.getNext()              && current.getElement().compareTo(element) < 0) {        insertAfter = current;        current = current.getNext();      }      if (insertAfter == null) {        Node<T> newNode = new Node(element, head);        head = newNode;      } else if (insertAfter == tail) {        Node<T> newNode = new Node<>(element, insertAfter.getNext());        insertAfter.setNext(newNode);        tail = newNode;      } else {        Node<T> newNode = new Node<>(element, insertAfter.getNext());        insertAfter.setNext(newNode);      }    }    if (result) {      numItems++;    }    return result;  }	// method add  //   	Removes the first instance of the specified element from this  //   	list and returns a reference to it.  Throws an EmptyListException  //   	if the list is empty.  Throws a NoSuchElementException if the  //   	specified element is not found in the list.  @Override  public T remove(T targetElement) throws EmptyCollectionException,          ElementNotFoundException {    if (isEmpty()) {      throw new EmptyCollectionException("List");    }    boolean found = false;    Node<T> previous = null;    Node<T> current = head;    while (current != null && !found) {      if (targetElement.equals(current.getElement())) {        found = true;      } else {        previous = current;        current = current.getNext();      }    }    if (!found) {      throw new ElementNotFoundException("List");    }    T item = current.getElement();    if (size() == 1) {      head = tail = null;    } else if (current.equals(head)) {      head = current.getNext();    } else if (current.equals(tail)) {      tail = previous;      tail.setNext(null);    } else {      previous.setNext(current.getNext());    }    numItems--;    return item;  }  //  method remove  //  Removes and all elements from this list.  @Override  public void clear() {    head = null;    numItems = 0;  }  // method clear  //  	Returns true if the specified element is found in this list and  //  	false otherwise. Throws an EmptyCollectionException if the list is empty.  @Override  public boolean contains(T targetElement)          throws EmptyCollectionException {    if (isEmpty()) {      throw new EmptyCollectionException("List");    }    boolean result = false;    for (Node<T> current = head; current != tail.getNext() && !result;            current = current.getNext()) {      if (current.getElement().equals(targetElement)) {        result = true;      }    }    return result;  }	// method contains  //  	Returns true if this list is empty and false otherwise.  @Override  public boolean isEmpty() {    return numItems == 0;  }  // method isEmpty  //  	Returns the number of elements in this list.  public int size() {    return numItems;  }  // method size  //  	Returns a string representation of this list.  public String toString() {    String result = "";    Node<T> current = head;    while (current != null) {      result += "" + current.getElement() + "\n";      current = current.getNext();    }    return result;  }  // method toString  //  Returns an array containing all of the elements in this collection.  public Object[] toArray() {    Object[] arr = new Object[numItems];    Node<T> current = head;    for (int count = 0; count < numItems; count++) {      arr[count] = current.getElement();      current = current.getNext();    }    return arr;  }  // method toArray  //  	Returns an iterator for the elements currently in this list.  public Iterator<T> iterator() {    return new LinkedIterator<T>(head, numItems);  }  // method Iterator}  // class OrderedCollection